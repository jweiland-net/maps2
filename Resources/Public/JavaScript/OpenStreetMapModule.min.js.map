{"version":3,"sources":["OpenStreetMapModule.js"],"names":["$","ExtConf","PoiCollection","FormEngine","OpenStreetMapModule","use strict","element","map","constructor","this","document","querySelector","let","extConf","JSON","parse","dataset","poiCollection","marker","createMap","collectionType","createMarker","createArea","createRoute","createRadius","findAddress","latitude","longitude","panTo","defaultLatitude","defaultLongitude","on","invalidateSize","L","editable","setView","tileLayer","location","protocol","maxZoom","attribution","id","addTo","osm","draggable","setLatLngFields","getLatLng","lat","toFixed","lng","event","setLatLng","latlng","area","coordinatesArray","options","color","strokeColor","weight","strokeWeight","opacity","strokeOpacity","fillColor","fillOpacity","configurationMap","i","length","push","editTools","startPolygon","polygon","enableEdit","target","getCenter","storeRouteAsJson","getLatLngs","route","startPolyline","polyline","circle","radius","defaultRadius","getRadius","rad","address","setFieldValue","parseInt","getUriForCoordinates","coordinates","routeObject","index","getFieldElement","field","buildFieldName","uid","value","$fieldElement","val","triggerHandler","stringify","$pacSearch","getElementById","keydown","which","ajax","type","url","encodeURI","dataType","done","data","alert","parseFloat","lon","formattedAddress","getFormattedAddress","editor","updateResizeLatLng","reset","fail","city","hasOwnProperty","road","houseNumber","postcode","village","town","country"],"mappings":"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","file":"OpenStreetMapModule.min.js","sourcesContent":["import $ from 'jquery';\nimport { ExtConf, PoiCollection } from '@jweiland/maps2/Classes.js';\nimport FormEngine from \"@typo3/backend/form-engine.js\";\n\nclass OpenStreetMapModule {\n  \"use strict\"\n\n  /**\n   * @type {HTMLElement}\n   */\n  element = {};\n\n  /**\n   * @type {L.Map}\n   */\n  map = {};\n\n  constructor() {\n    this.element = document.querySelector(\"#maps2ConfigurationMap\");\n\n    /**\n     * @type {ExtConf}\n     */\n    let extConf = new ExtConf(JSON.parse(this.element.dataset.extConf));\n\n    /**\n     * @type {PoiCollection}\n     */\n    let poiCollection = new PoiCollection(JSON.parse(this.element.dataset.poiCollection));\n\n    /**\n     * @type {L.Marker}\n     */\n    let marker = {};\n\n    this.createMap();\n\n    switch (poiCollection.collectionType) {\n      case \"Point\":\n        marker = this.createMarker(poiCollection);\n        break;\n      case \"Area\":\n        this.createArea(poiCollection, extConf);\n        break;\n      case \"Route\":\n        this.createRoute(poiCollection, extConf);\n        break;\n      case \"Radius\":\n        marker = this.createRadius(poiCollection, extConf);\n        break;\n    }\n\n    this.findAddress(poiCollection, marker);\n\n    if (poiCollection.latitude && poiCollection.longitude) {\n      this.map.panTo([poiCollection.latitude, poiCollection.longitude]);\n    } else {\n      // Fallback\n      this.map.panTo([extConf.defaultLatitude, extConf.defaultLongitude]);\n    }\n\n    // If maps2 was inserted in (bootstrap) tabs, we have to re-render the map\n    $(\"ul.t3js-tabs a[data-bs-toggle='tab']:eq(1)\").on(\"shown.bs.tab\", () => {\n      this.map.invalidateSize();\n      if (poiCollection.latitude && poiCollection.longitude) {\n        this.map.panTo([poiCollection.latitude, poiCollection.longitude]);\n      } else {\n        // Fallback\n        this.map.panTo([extConf.defaultLatitude, extConf.defaultLongitude]);\n      }\n    });\n  }\n\n  createMap = () => {\n    this.map = L.map(\n      this.element,\n      {\n        editable: true\n      }).setView([51.505, -0.09], 15);\n\n    L.tileLayer(location.protocol + \"//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      maxZoom: 18,\n      attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +  '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' + 'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n      id: \"mapbox.streets\"\n    }).addTo(this.map);\n  };\n\n  createMarker = poiCollection => {\n    let osm = this;\n    let marker = L.marker(\n      [poiCollection.latitude, poiCollection.longitude],\n      {\n        \"draggable\": true\n      }\n    ).addTo(this.map);\n\n    // update fields and marker while dragging\n    marker.on(\"dragend\", () => {\n      osm.setLatLngFields(\n        poiCollection,\n        marker.getLatLng().lat.toFixed(6),\n        marker.getLatLng().lng.toFixed(6),\n        0\n      );\n    });\n\n    // update fields and marker when clicking on the map\n    this.map.on(\"click\", event => {\n      marker.setLatLng(event.latlng);\n      osm.setLatLngFields(\n        poiCollection,\n        event.latlng.lat.toFixed(6),\n        event.latlng.lng.toFixed(6),\n        0\n      );\n    });\n\n    return marker;\n  };\n\n  createArea = (poiCollection, extConf) => {\n    let osm = this;\n    let area = {};\n    let coordinatesArray = [];\n    let options = {\n      color: extConf.strokeColor,\n      weight: extConf.strokeWeight,\n      opacity: extConf.strokeOpacity,\n      fillColor: extConf.fillColor,\n      fillOpacity: extConf.fillOpacity\n    };\n\n    if (poiCollection.configurationMap) {\n      for (let i = 0; i < poiCollection.configurationMap.length; i++) {\n        coordinatesArray.push([\n          poiCollection.configurationMap[i].latitude,\n          poiCollection.configurationMap[i].longitude]\n        );\n      }\n    }\n\n    if (coordinatesArray.length === 0) {\n      area = this.map.editTools.startPolygon(null, options);\n    } else {\n      area = L.polygon(coordinatesArray, options).addTo(this.map);\n      area.enableEdit();\n    }\n\n    this.map.on(\"moveend\", event => {\n      osm.setLatLngFields(\n        poiCollection,\n        event.target.getCenter().lat.toFixed(6),\n        event.target.getCenter().lng.toFixed(6),\n        0\n      );\n    });\n    this.map.on(\"editable:vertex:new\", event => {\n      osm.storeRouteAsJson(poiCollection, area.getLatLngs()[0]);\n    });\n    this.map.on(\"editable:vertex:deleted\", event => {\n      osm.storeRouteAsJson(poiCollection, area.getLatLngs()[0]);\n    });\n    this.map.on(\"editable:vertex:dragend\", event => {\n      osm.storeRouteAsJson(poiCollection, area.getLatLngs()[0]);\n    });\n  };\n\n  createRoute = (poiCollection, extConf) => {\n    let osm = this;\n    let route = {};\n    let coordinatesArray = [];\n    let options = {\n      color: extConf.strokeColor,\n      weight: extConf.strokeWeight,\n      opacity: extConf.strokeOpacity\n    };\n\n    if (poiCollection.configurationMap) {\n      for (let i = 0; i < poiCollection.configurationMap.length; i++) {\n        coordinatesArray.push([\n          poiCollection.configurationMap[i].latitude,\n          poiCollection.configurationMap[i].longitude]\n        );\n      }\n    }\n\n    if (coordinatesArray.length === 0) {\n      route = this.map.editTools.startPolyline(null, options);\n    } else {\n      route = L.polyline(coordinatesArray, options).addTo(this.map);\n      route.enableEdit();\n    }\n\n    this.map.on(\"moveend\", event => {\n      osm.setLatLngFields(\n        poiCollection,\n        event.target.getCenter().lat.toFixed(6),\n        event.target.getCenter().lng.toFixed(6),\n        0\n      );\n    });\n    this.map.on(\"editable:vertex:new\", event => {\n      osm.storeRouteAsJson(poiCollection, route.getLatLngs());\n    });\n    this.map.on(\"editable:vertex:deleted\", event => {\n      osm.storeRouteAsJson(poiCollection, route.getLatLngs());\n    });\n    this.map.on(\"editable:vertex:dragend\", event => {\n      osm.storeRouteAsJson(poiCollection, route.getLatLngs());\n    });\n  };\n\n  createRadius = (poiCollection, extConf) => {\n    let osm = this;\n    let marker = L.circle(\n      [poiCollection.latitude, poiCollection.longitude],\n      {\n        color: extConf.strokeColor,\n        opacity: extConf.strokeOpacity,\n        weight: extConf.strokeWeight,\n        fillColor: extConf.fillColor,\n        fillOpacity: extConf.fillOpacity,\n        radius: poiCollection.radius ? poiCollection.radius : extConf.defaultRadius\n      }\n    ).addTo(this.map);\n\n    let editor = marker.enableEdit();\n\n    // Update fields and marker while dragging\n    marker.on(\"editable:dragend editable:vertex:dragend\", event => {\n      osm.setLatLngFields(\n        poiCollection,\n        marker.getLatLng().lat.toFixed(6),\n        marker.getLatLng().lng.toFixed(6),\n        marker.getRadius()\n      );\n    });\n\n    return marker;\n  };\n\n  /**\n   * Fill TCA fields for Lat and Lng with value of marker position\n   *\n   * @param number lat\n   * @param number lng\n   * @param number rad\n   * @param string address\n   */\n  setLatLngFields = (poiCollection, lat, lng, rad, address) => {\n    this.setFieldValue(poiCollection, \"latitude\", lat);\n    this.setFieldValue(poiCollection, \"longitude\", lng);\n\n    if (typeof rad !== \"undefined\" && rad > 0) {\n      this.setFieldValue(poiCollection, \"radius\", parseInt(rad));\n    }\n\n    if (typeof address !== \"undefined\") {\n      this.setFieldValue(poiCollection, \"address\", address);\n    }\n  };\n\n  /**\n   * Generate an uri to save all coordinates\n   *\n   * @param coordinates\n   */\n  getUriForCoordinates = coordinates => {\n    let routeObject = {};\n\n    for (let index = 0; index < coordinates.length; index++) {\n      routeObject[index] = coordinates[index][\"lat\"] + \",\" + coordinates[index][\"lng\"];\n    }\n\n    return routeObject;\n  };\n\n  /**\n   * Return FieldElement from TCEFORM by fieldName\n   *\n   * @param field\n   * @returns {*|HTMLElement} jQuery object. FormEngine works with $ selectors\n   */\n  getFieldElement = (poiCollection, field) => {\n    // Return the FieldElement which is visible to the editor\n    return FormEngine.getFieldElement(this.buildFieldName(poiCollection, field), \"_list\");\n  };\n\n  /**\n   * Build fieldName like \"data[tx_maps2_domain_model_poicollection][1][latitude]\"\n   *\n   * @param poiCollection\n   * @param field\n   * @returns {string}\n   */\n  buildFieldName = (poiCollection, field) => {\n    return \"data[tx_maps2_domain_model_poicollection][\" + poiCollection.uid + \"][\" + field + \"]\";\n  };\n\n  /**\n   * Set field value\n   *\n   * @param poiCollection\n   * @param field\n   * @param value\n   */\n  setFieldValue = (poiCollection, field, value) => {\n    let $fieldElement = this.getFieldElement(poiCollection, field);\n    if ($fieldElement && $fieldElement.length) {\n      $fieldElement.val(value);\n      $fieldElement.triggerHandler(\"change\");\n    }\n  };\n\n  /**\n   * Store route/area path into configurationMap as JSON\n   *\n   * @param coordinates\n   */\n  storeRouteAsJson = (poiCollection, coordinates) => {\n    this.setFieldValue(\n      poiCollection,\n      \"configuration_map\",\n      JSON.stringify(this.getUriForCoordinates(coordinates))\n    );\n  };\n\n  /**\n   * read address, send it to OpenStreetMap and move map/marker to new location\n   */\n  findAddress = (poiCollection, marker) => {\n    let osm = this;\n    let $pacSearch = $(document.getElementById(\"pac-search\"));\n\n    // Prevent submitting the BE form on enter\n    $pacSearch.keydown(event => {\n      if (event.which === 13) {\n        if ($pacSearch.val()) {\n          $.ajax({\n            type: \"GET\",\n            url: \"https://nominatim.openstreetmap.org/search?q=\" + encodeURI($pacSearch.val()) + \"&format=json&addressdetails=1\",\n            dataType: \"json\"\n          }).done(data => {\n            if (data.length === 0) {\n              alert(\"Address not found\");\n            } else {\n              let lat = parseFloat(data[0].lat).toFixed(6);\n              let lng = parseFloat(data[0].lon).toFixed(6);\n              let address = data[0].address;\n              let formattedAddress = osm.getFormattedAddress(address);\n\n              switch (poiCollection.collectionType) {\n                case \"Point\":\n                  marker.setLatLng([lat, lng]);\n                  osm.setLatLngFields(poiCollection, lat, lng, 0, formattedAddress);\n                  break;\n                case \"Area\":\n                  osm.setLatLngFields(poiCollection, lat, lng, 0, formattedAddress);\n                  break;\n                case \"Route\":\n                  osm.setLatLngFields(poiCollection, lat, lng, 0, formattedAddress);\n                  break;\n                case \"Radius\":\n                  marker.setLatLng([lat, lng]);\n                  marker.editor.updateResizeLatLng();\n                  marker.editor.reset();\n                  osm.setLatLngFields(poiCollection, lat, lng, marker.getRadius(), formattedAddress);\n                  break;\n              }\n\n              osm.map.panTo([lat, lng]);\n            }\n          }).fail(() => {\n            // alert(\"Shit\");\n          });\n        }\n\n        return false;\n      }\n    });\n  };\n\n  /**\n   * format address from ajax result\n   *\n   * @param address\n   * @returns {string}\n   */\n  getFormattedAddress = address => {\n    let formattedAddress = \"\";\n    let city = \"\";\n\n    if (address.hasOwnProperty(\"road\")) {\n      formattedAddress += address.road;\n    }\n    if (address.hasOwnProperty(\"houseNumber\")) {\n      formattedAddress += \" \" + address.houseNumber;\n    }\n    if (address.hasOwnProperty(\"postcode\")) {\n      formattedAddress += \", \" + address.postcode;\n    }\n\n    if (address.hasOwnProperty(\"village\")) {\n      city = address.village;\n    }\n    if (address.hasOwnProperty(\"town\")) {\n      city = address.town;\n    }\n    if (address.hasOwnProperty(\"city\")) {\n      city = address.city;\n    }\n    formattedAddress += \" \" + city;\n\n    if (address.hasOwnProperty(\"country\")) {\n      formattedAddress += \", \" + address.country;\n    }\n\n    return formattedAddress;\n  };\n}\n\nexport default new OpenStreetMapModule();\n"]}