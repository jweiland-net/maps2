{"version":3,"sources":["OpenStreetMap2.js"],"names":["OpenStreetMap2","element","environment","editable","bounds","allMarkers","categorizedMarkers","poiCollections","map","constructor","this","classList","contains","L","LatLngBounds","preparePoiCollection","setMapDimensions","createMap","setMarkersOnMap","JSON","parse","getAttribute","isPOICollectionsEmpty","createMarkerBasedOnDataAttributes","createMarkerBasedOnPOICollections","length","latitude","getAttributeAsFloat","longitude","isNaN","createMarkerByLatLng","attributeName","parseFloat","createPointByCollectionType","countObjectProperties","showSwitchableCategories","adjustMapZoom","shouldFitBounds","fitBounds","panTo","getSettings","forceZoom","collectionType","style","height","normalizeDimension","mapHeight","width","mapWidth","dimension","let","normalizedDimension","String","canBeInterpretedAsNumber","center","getExtConf","defaultLatitude","defaultLongitude","zoom","scrollWheelZoom","activateScrollWheel","tileLayer","mapTile","attribution","mapTileAttribution","maxZoom","addTo","groupCategories","groupedCategories","forEach","poiCollection","categories","category","uid","filter","includes","categoryUid","hasOwnProperty","find","getCategoriesOfCheckboxesWithStatus","form","isChecked","Array","from","querySelectorAll","push","parseInt","value","getMarkersToChangeVisibilityFor","markers","marker","allCategoriesOfMarker","categoriesOfCheckboxesWithStatus","i","markerCategoryHasCheckboxWithStatus","j","k","document","createElement","add","setAttribute","getContentRecord","appendChild","getCheckbox","querySelector","insertAdjacentHTML","title","checkbox","addEventListener","checked","addLayer","removeLayer","insertAdjacentElement","div","innerHTML","obj","count","key","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","createMarker","createArea","createRoute","createRadius","c","extend","getLatLng","icon","draggable","markerIcon","iconUrl","iconSize","markerIconWidth","markerIconHeight","iconAnchor","markerIconAnchorPosX","markerIconAnchorPosY","setIcon","addEditListeners","addInfoWindow","latlngs","pois","poi","latLng","polygon","color","opacity","weight","polyline","circle","radius","getBounds","fetch","ajaxUrl","method","headers","Content-Type","ext-maps2","body","stringify","then","response","json","data","bindPopup","content","openPopup","catch","error","console","mapContainer","on","lat","toFixed","lng","previousElementSibling","setLatLng","event","latlng","Number","contentRecord","extConf","settings","maps2OpenStreetMaps","dataset","override","args","extended","deep","Object","prototype","toString","call","prop"],"mappings":"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","file":"OpenStreetMap2.min.js","sourcesContent":["class OpenStreetMap2 {\n  element = {};\n  environment = {};\n  editable = false;\n  bounds = {};\n\n  allMarkers = [];\n  categorizedMarkers = {};\n  poiCollections = [];\n  map = {};\n\n  constructor(element, environment) {\n    this.element = element;\n    this.environment = environment;\n    this.editable = this.element.classList.contains(\"editMarker\");\n    this.bounds = new L.LatLngBounds();\n\n    this.preparePoiCollection();\n    this.setMapDimensions();\n    this.createMap();\n    this.setMarkersOnMap();\n  }\n\n  preparePoiCollection() {\n    this.poiCollections = JSON.parse(this.element.getAttribute(\"data-pois\") || '[]');\n  }\n\n  setMarkersOnMap() {\n    if (this.isPOICollectionsEmpty()) {\n      this.createMarkerBasedOnDataAttributes();\n    } else {\n      this.createMarkerBasedOnPOICollections();\n    }\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  isPOICollectionsEmpty() {\n    return this.poiCollections.length === 0;\n  }\n\n  createMarkerBasedOnDataAttributes() {\n    const latitude = this.getAttributeAsFloat(\"data-latitude\");\n    const longitude = this.getAttributeAsFloat(\"data-longitude\");\n\n    if (!isNaN(latitude) && !isNaN(longitude)) {\n      this.createMarkerByLatLng(latitude, longitude);\n    }\n  }\n\n  /**\n   * @param {string} attributeName\n   * @returns {number}\n   */\n  getAttributeAsFloat(attributeName) {\n    return parseFloat(this.element.getAttribute(attributeName) || \"\");\n  }\n\n  createMarkerBasedOnPOICollections() {\n    this.createPointByCollectionType();\n    if (this.countObjectProperties(this.categorizedMarkers) > 1) {\n      this.showSwitchableCategories();\n    }\n    this.adjustMapZoom();\n  }\n\n  adjustMapZoom() {\n    if (this.shouldFitBounds()) {\n      this.map.fitBounds(this.bounds);\n    } else {\n      this.map.panTo([this.poiCollections[0].latitude, this.poiCollections[0].longitude]);\n    }\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  shouldFitBounds() {\n    if (this.getSettings().forceZoom === true) {\n      return false;\n    }\n\n    if (this.poiCollections === null) {\n      return false;\n    }\n\n    if (this.poiCollections.length > 1) {\n      return true;\n    }\n\n    if (\n      this.poiCollections.length === 1\n      && (\n        this.poiCollections[0].collectionType === \"Area\"\n        || this.poiCollections[0].collectionType === \"Route\"\n      )\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  setMapDimensions() {\n    this.element.style.height = this.normalizeDimension(this.getSettings().mapHeight);\n    this.element.style.width = this.normalizeDimension(this.getSettings().mapWidth);\n  }\n\n  /**\n   * @param {string | number} dimension\n   * @returns {string}\n   */\n  normalizeDimension(dimension) {\n    let normalizedDimension = String(dimension);\n\n    if (this.canBeInterpretedAsNumber(normalizedDimension)) {\n      normalizedDimension += 'px';\n    }\n\n    return normalizedDimension;\n  }\n\n  createMap() {\n    this.map = L.map(\n      this.element, {\n        center: [this.getExtConf().defaultLatitude, this.getExtConf().defaultLongitude],\n        zoom: this.getSettings().zoom ? this.getSettings().zoom : 12,\n        editable: this.editable,\n        scrollWheelZoom: this.getSettings().activateScrollWheel !== \"0\"\n      }\n    );\n\n    L.tileLayer(this.getSettings().mapTile, {\n      attribution: this.getSettings().mapTileAttribution,\n      maxZoom: 20\n    }).addTo(this.map);\n  }\n\n  /**\n   * @returns {{[p: string]: Category}}\n   */\n  groupCategories() {\n    const groupedCategories = {};\n\n    this.poiCollections.forEach((poiCollection) => {\n      const categoryUids = poiCollection.categories.map((category) => String(category.uid));\n\n      categoryUids\n        .filter((categoryUid) => this.getSettings().categories.includes(categoryUid))\n        .forEach((categoryUid) => {\n          if (!groupedCategories.hasOwnProperty(categoryUid)) {\n            groupedCategories[categoryUid] = poiCollection.categories.find((category) => String(category.uid) === categoryUid);\n          }\n        });\n    });\n\n    return groupedCategories;\n  }\n\n  /**\n   * @param {HTMLElement} form\n   * @param {boolean} isChecked\n   * @returns {number[]}\n   */\n  getCategoriesOfCheckboxesWithStatus(form, isChecked) {\n    let categories = [];\n    let checkboxes = isChecked\n      ? Array.from(form.querySelectorAll(\"input:checked\"))\n      : Array.from(form.querySelectorAll(\"input:not(:checked)\"));\n\n    checkboxes.forEach((checkbox) => {\n      categories.push(parseInt((checkbox).value));\n    });\n\n    return categories;\n  }\n\n  /**\n   * @param {string} categoryUid\n   * @param {HTMLElement} form\n   * @param { boolean} isChecked\n   * @returns {*[]}\n   */\n  getMarkersToChangeVisibilityFor(categoryUid, form, isChecked) {\n    let markers = [];\n    if (this.allMarkers.length === 0) {\n      return markers;\n    }\n\n    let marker = null;\n    let allCategoriesOfMarker = null;\n    let categoriesOfCheckboxesWithStatus = this.getCategoriesOfCheckboxesWithStatus(form, isChecked);\n    for (let i = 0; i < this.allMarkers.length; i++) {\n      marker = this.allMarkers[i];\n      allCategoriesOfMarker = marker.poiCollection.categories;\n      if (allCategoriesOfMarker.length === 0) {\n        continue;\n      }\n\n      let markerCategoryHasCheckboxWithStatus;\n      for (let j = 0; j < allCategoriesOfMarker.length; j++) {\n        markerCategoryHasCheckboxWithStatus = false;\n        for (let k = 0; k < categoriesOfCheckboxesWithStatus.length; k++) {\n          if (allCategoriesOfMarker[j].uid === categoriesOfCheckboxesWithStatus[k]) {\n            markerCategoryHasCheckboxWithStatus = true;\n          }\n        }\n        if (markerCategoryHasCheckboxWithStatus === isChecked) {\n          break;\n        }\n      }\n\n      if (markerCategoryHasCheckboxWithStatus) {\n        markers.push(marker.marker);\n      }\n    }\n\n    return markers;\n  }\n\n  showSwitchableCategories() {\n    let categories = this.groupCategories();\n    let form = document.createElement(\"form\");\n    form.classList.add(\"txMaps2Form\");\n    form.setAttribute(\"id\", \"txMaps2Form-\" + this.getContentRecord().uid);\n\n    // Add checkbox for category\n    for (let categoryUid in categories) {\n      if (categories.hasOwnProperty(categoryUid)) {\n        form.appendChild(this.getCheckbox(categories[categoryUid]));\n        form.querySelector(\"#checkCategory_\" + categoryUid)?.insertAdjacentHTML(\n          \"afterend\",\n          `<span class=\"map-category\">${categories[categoryUid].title}</span>`\n        );\n      }\n    }\n\n    // Add listener for checkboxes\n    form.querySelectorAll(\"input\").forEach((checkbox) => {\n      checkbox.addEventListener(\"click\", () => {\n        let isChecked = (checkbox).checked;\n        let categoryUid = (checkbox).value;\n        let markers = this.getMarkersToChangeVisibilityFor(categoryUid, form, isChecked);\n\n        markers.forEach((marker) => {\n          if (isChecked) {\n            this.map.addLayer(marker);\n          } else {\n            this.map.removeLayer(marker);\n          }\n        });\n      });\n    });\n\n    this.element.insertAdjacentElement(\"afterend\", form);\n  }\n\n  /**\n   * @param {Category} category\n   * @returns {HTMLElement}\n   */\n  getCheckbox(category) {\n    let div = document.createElement(\"div\");\n    div.classList.add(\"form-group\");\n    div.innerHTML = `\n      <div class=\"checkbox\">\n          <label>\n              <input type=\"checkbox\" class=\"checkCategory\" id=\"checkCategory_${category.uid}\" checked=\"checked\" value=\"${category.uid}\">\n          </label>\n      </div>`;\n\n    return div;\n  }\n\n  /**\n   * @param {object} obj\n   * @returns {number}\n   */\n  countObjectProperties(obj) {\n    let count = 0;\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  createPointByCollectionType() {\n    let marker;\n    let categoryUid = 0;\n\n    if (this.poiCollections !== null && this.poiCollections.length) {\n      this.poiCollections.forEach(poiCollection => {\n        if (poiCollection.strokeColor === \"\") {\n          poiCollection.strokeColor = this.getExtConf().strokeColor;\n        }\n        if (poiCollection.strokeOpacity === \"\") {\n          poiCollection.strokeOpacity = this.getExtConf().strokeOpacity;\n        }\n        if (poiCollection.strokeWeight === \"\") {\n          poiCollection.strokeWeight = this.getExtConf().strokeWeight;\n        }\n        if (poiCollection.fillColor === \"\") {\n          poiCollection.fillColor = this.getExtConf().fillColor;\n        }\n        if (poiCollection.fillOpacity === \"\") {\n          poiCollection.fillOpacity = this.getExtConf().fillOpacity;\n        }\n\n        marker = null;\n        switch (poiCollection.collectionType) {\n          case \"Point\":\n            marker = this.createMarker(poiCollection);\n            break;\n          case \"Area\":\n            marker = this.createArea(poiCollection);\n            break;\n          case \"Route\":\n            marker = this.createRoute(poiCollection);\n            break;\n          case \"Radius\":\n            marker = this.createRadius(poiCollection);\n            break;\n        }\n\n        this.allMarkers.push({\n          marker: marker,\n          poiCollection: poiCollection\n        });\n\n        categoryUid = 0;\n        for (let c = 0; c < poiCollection.categories.length; c++) {\n          categoryUid = poiCollection.categories[c].uid;\n          if (!this.categorizedMarkers.hasOwnProperty(categoryUid)) {\n            this.categorizedMarkers[categoryUid] = [];\n          }\n          this.categorizedMarkers[categoryUid].push(marker);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {number} latitude\n   * @param {number} longitude\n   */\n  createMarkerByLatLng(latitude, longitude) {\n    let marker = L.marker(\n      [latitude, longitude]\n    ).addTo(this.map);\n\n    this.bounds.extend(marker.getLatLng());\n  }\n\n  /**\n   * @param {PoiCollection} poiCollection\n   * @returns {Marker<any>}\n   */\n  createMarker(poiCollection) {\n    let marker = L.marker(\n      [poiCollection.latitude, poiCollection.longitude],\n      {\n        'draggable': this.editable\n      }\n    ).addTo(this.map);\n\n    if (poiCollection.hasOwnProperty(\"markerIcon\") && poiCollection.markerIcon !== \"\") {\n      let icon = L.icon({\n        iconUrl: poiCollection.markerIcon,\n        iconSize: [poiCollection.markerIconWidth, poiCollection.markerIconHeight],\n        iconAnchor: [poiCollection.markerIconAnchorPosX, poiCollection.markerIconAnchorPosY]\n      });\n      marker.setIcon(icon);\n    }\n\n    this.bounds.extend(marker.getLatLng());\n\n    if (this.editable) {\n      this.addEditListeners(this.element, marker, poiCollection);\n    } else {\n      this.addInfoWindow(marker, poiCollection);\n    }\n\n    return marker;\n  }\n\n  /**\n   * @param {PoiCollection} poiCollection\n   * @returns {Polygon<any>}\n   */\n  createArea(poiCollection) {\n    let latlngs = [];\n\n    poiCollection.pois.forEach(poi => {\n      let latLng = [poi.latitude, poi.longitude];\n      this.bounds.extend(latLng);\n      latlngs.push(latLng);\n    });\n\n    let marker = L.polygon(latlngs, {\n      color: poiCollection.strokeColor,\n      opacity: poiCollection.strokeOpacity,\n      weight: poiCollection.strokeWeight,\n      fillColor: poiCollection.fillColor,\n      fillOpacity: poiCollection.fillOpacity\n    }).addTo(this.map);\n\n    this.addInfoWindow(marker, poiCollection);\n\n    return marker;\n  }\n\n  /**\n   * @param {PoiCollection} poiCollection\n   * @returns {Polyline<LineString | MultiLineString, any>}\n   */\n  createRoute(poiCollection) {\n    let latlngs = [];\n\n    poiCollection.pois.forEach(poi => {\n      let latLng = [poi.latitude, poi.longitude];\n      this.bounds.extend(latLng);\n      latlngs.push(latLng);\n    });\n\n    let marker = L.polyline(latlngs, {\n      color: poiCollection.strokeColor,\n      opacity: poiCollection.strokeOpacity,\n      weight: poiCollection.strokeWeight,\n      fillColor: poiCollection.fillColor,\n      fillOpacity: poiCollection.fillOpacity\n    }).addTo(this.map);\n\n    this.addInfoWindow(marker, poiCollection);\n\n    return marker;\n  }\n\n  /**\n   * @param {PoiCollection} poiCollection\n   * @returns {Circle<any>}\n   */\n  createRadius(poiCollection) {\n    let marker = L.circle([poiCollection.latitude, poiCollection.longitude], {\n      color: poiCollection.strokeColor,\n      opacity: poiCollection.strokeOpacity,\n      weight: poiCollection.strokeWeight,\n      fillColor: poiCollection.fillColor,\n      fillOpacity: poiCollection.fillOpacity,\n      radius: poiCollection.radius\n    }).addTo(this.map);\n\n    this.bounds.extend(marker.getBounds());\n\n    this.addInfoWindow(marker, poiCollection);\n\n    return marker;\n  }\n\n  /**\n   * @param {HTMLElement} element\n   * @param {PoiCollection} poiCollection\n   */\n  addInfoWindow(element, poiCollection) {\n    element.addEventListener(\"click\", () => {\n      fetch(this.environment.ajaxUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"ext-maps2\": \"infoWindowContent\"\n        },\n        body: JSON.stringify({\n          poiCollection: poiCollection.uid\n        })\n      })\n        .then(response => response.json())\n        .then(data => {\n          element.bindPopup(data.content).openPopup();\n        })\n        .catch(error => console.error('Error:', error));\n    });\n  }\n\n  /**\n   * @param {HTMLElement} mapContainer\n   * @param {L.Marker} marker\n   * @param {PoiCollection} poiCollection\n   */\n  addEditListeners(mapContainer, marker, poiCollection) {\n    marker.on('dragend', () => {\n      let lat = marker.getLatLng().lat.toFixed(6);\n      let lng = marker.getLatLng().lng.toFixed(6);\n      mapContainer\n        .previousElementSibling\n        ?.querySelector(`input.latitude-${this.getContentRecord().uid}`)\n        .setAttribute(\"value\", lat);\n      mapContainer\n        .previousElementSibling\n        ?.querySelector(`input.longitude-${this.getContentRecord().uid}`)\n        .setAttribute(\"value\", lng);\n    });\n\n    this.map.on('click', (event) => {\n      marker.setLatLng(event.latlng);\n      mapContainer\n        .previousElementSibling\n        ?.querySelector(`input.latitude-${this.getContentRecord().uid}`)\n        .setAttribute(\"value\", event.latlng.lat.toFixed(6));\n      mapContainer\n        .previousElementSibling\n        ?.querySelector(`input.longitude-${this.getContentRecord().uid}`)\n        .setAttribute(\"value\", event.latlng.lng.toFixed(6));\n    });\n  }\n\n  /**\n   * return {boolean}\n   */\n  canBeInterpretedAsNumber(value) {\n    return typeof value === 'number' || !isNaN(Number(value));\n  }\n\n  /**\n   * return {ContentRecord}\n   */\n  getContentRecord() {\n    return this.environment.contentRecord;\n  }\n\n  /**\n   * return {ExtConf}\n   */\n  getExtConf() {\n    return this.environment.extConf;\n  }\n\n  /**\n   * return {Settings}\n   */\n  getSettings() {\n    return this.environment.settings;\n  }\n}\n\nlet maps2OpenStreetMaps = [];\n\ndocument.querySelectorAll(\".maps2\").forEach((element) => {\n  const environment = typeof element.dataset.environment !== 'undefined' ? element.dataset.environment : '{}';\n  const override = typeof element.dataset.override !== 'undefined' ? element.dataset.override : '{}';\n\n  // Pass in the objects to merge as arguments.\n  // For a deep extend, set the first argument to `true`.\n  const extend = (...args) => {\n    let extended = {};\n    let deep = false;\n    let i = 0;\n    let length = args.length;\n\n    // Check for deep merge\n    if (Object.prototype.toString.call(args[0]) === '[object Boolean]') {\n      deep = args[0];\n      i++;\n    }\n\n    // Merge the object into the extended object\n    const merge = function (obj) {\n      for ( var prop in obj ) {\n        if ( Object.prototype.hasOwnProperty.call( obj, prop ) ) {\n          // If deep merge and property is an object, merge properties\n          if ( deep && Object.prototype.toString.call(obj[prop]) === '[object Object]' ) {\n            extended[prop] = extend( true, extended[prop], obj[prop] );\n          } else {\n            extended[prop] = obj[prop];\n          }\n        }\n      }\n    };\n\n    // Loop through each object and conduct a merge\n    for ( ; i < length; i++ ) {\n      var obj = args[i];\n      merge(obj);\n    }\n\n    return extended;\n  };\n\n  maps2OpenStreetMaps.push(new OpenStreetMap2(\n    element,\n    extend(true, JSON.parse(environment), JSON.parse(override))\n  ));\n});\n"]}