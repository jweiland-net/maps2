{"version":3,"sources":["OpenStreetMap2.js"],"names":["OpenStreetMap2","constructor","element","environment","this","allMarkers","categorizedMarkers","editable","classList","contains","bounds","L","LatLngBounds","extConf","defaultLatitude","defaultLongitude","preparePoiCollection","setMapDimensions","createMap","setMarkersOnMap","poiCollections","JSON","parse","getAttribute","isPOICollectionsEmpty","createMarkerBasedOnDataAttributes","createMarkerBasedOnPOICollections","length","latitude","getAttributeAsFloat","longitude","isNaN","createMarkerByLatLng","attributeName","parseFloat","createPointByCollectionType","countObjectProperties","showSwitchableCategories","adjustMapZoom","shouldFitBounds","map","fitBounds","panTo","getSettings","forceZoom","collectionType","style","height","normalizeDimension","mapHeight","width","mapWidth","dimension","let","normalizedDimension","String","canBeInterpretedAsNumber","center","getExtConf","zoom","scrollWheelZoom","activateScrollWheel","tileLayer","mapTile","attribution","mapTileAttribution","maxZoom","addTo","groupCategories","groupedCategories","forEach","poiCollection","categories","category","uid","filter","includes","categoryUid","hasOwnProperty","find","getCategoriesOfCheckboxesWithStatus","form","isChecked","Array","from","querySelectorAll","push","parseInt","checkbox","value","getMarkersToChangeVisibilityFor","markers","marker","allCategoriesOfMarker","categoriesOfCheckboxesWithStatus","i","markerCategoryHasCheckboxWithStatus","j","k","_a","document","createElement","add","setAttribute","getContentRecord","appendChild","getCheckbox","querySelector","insertAdjacentHTML","title","addEventListener","checked","addLayer","removeLayer","insertAdjacentElement","div","innerHTML","obj","count","key","strokeColor","strokeOpacity","createMarker","createArea","createRoute","createRadius","c","extend","getLatLng","icon","draggable","markerIcon","iconUrl","iconSize","markerIconWidth","markerIconHeight","iconAnchor","markerIconAnchorPosX","markerIconAnchorPosY","setIcon","addEditListeners","addInfoWindow","latlngs","pois","latLng","polygon","color","opacity","weight","strokeWeight","fillColor","fillOpacity","polyline","circle","radius","getBounds","fetch","ajaxUrl","method","headers","Content-Type","body","stringify","then","response","json","data","bindPopup","content","openPopup","catch","error","console","mapContainer","on","_b","lat","toFixed","lng","previousElementSibling","setLatLng","event","latlng","Number","contentRecord","settings","maps2OpenStreetMaps","dataset","override","Object","assign"],"mappings":"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","file":"OpenStreetMap2.min.js","sourcesContent":["class OpenStreetMap2 {\n    constructor(element, environment) {\n        this.element = element;\n        this.environment = environment;\n        this.allMarkers = [];\n        this.categorizedMarkers = {};\n        this.editable = this.element.classList.contains(\"editMarker\");\n        this.bounds = new L.LatLngBounds([\n            [environment.extConf.defaultLatitude, environment.extConf.defaultLongitude]\n        ]);\n        this.preparePoiCollection();\n        this.setMapDimensions();\n        this.createMap();\n        this.setMarkersOnMap();\n    }\n    preparePoiCollection() {\n        this.poiCollections = JSON.parse(this.element.getAttribute(\"data-pois\") || '[]');\n    }\n    setMarkersOnMap() {\n        if (this.isPOICollectionsEmpty()) {\n            this.createMarkerBasedOnDataAttributes();\n        }\n        else {\n            this.createMarkerBasedOnPOICollections();\n        }\n    }\n    isPOICollectionsEmpty() {\n        return this.poiCollections.length === 0;\n    }\n    createMarkerBasedOnDataAttributes() {\n        const latitude = this.getAttributeAsFloat(\"data-latitude\");\n        const longitude = this.getAttributeAsFloat(\"data-longitude\");\n        if (!isNaN(latitude) && !isNaN(longitude)) {\n            this.createMarkerByLatLng(latitude, longitude);\n        }\n    }\n    getAttributeAsFloat(attributeName) {\n        return parseFloat(this.element.getAttribute(attributeName) || \"\");\n    }\n    createMarkerBasedOnPOICollections() {\n        this.createPointByCollectionType();\n        if (this.countObjectProperties(this.categorizedMarkers) > 1) {\n            this.showSwitchableCategories();\n        }\n        this.adjustMapZoom();\n    }\n    adjustMapZoom() {\n        if (this.shouldFitBounds()) {\n            this.map.fitBounds(this.bounds);\n        }\n        else {\n            this.map.panTo([this.poiCollections[0].latitude, this.poiCollections[0].longitude]);\n        }\n    }\n    shouldFitBounds() {\n        return this.getSettings().forceZoom === false\n            && (this.poiCollections.length > 1\n                || (this.poiCollections.length === 1\n                    && (this.poiCollections[0].collectionType === \"Area\"\n                        || this.poiCollections[0].collectionType === \"Route\")));\n    }\n    setMapDimensions() {\n        this.element.style.height = this.normalizeDimension(this.getSettings().mapHeight);\n        this.element.style.width = this.normalizeDimension(this.getSettings().mapWidth);\n    }\n    normalizeDimension(dimension) {\n        let normalizedDimension = String(dimension);\n        if (this.canBeInterpretedAsNumber(normalizedDimension)) {\n            normalizedDimension += 'px';\n        }\n        return normalizedDimension;\n    }\n    createMap() {\n        this.map = L.map(this.element, {\n            center: [this.getExtConf().defaultLatitude, this.getExtConf().defaultLongitude],\n            zoom: this.getSettings().zoom ? this.getSettings().zoom : 12,\n            editable: this.editable,\n            scrollWheelZoom: this.getSettings().activateScrollWheel !== \"0\"\n        });\n        L.tileLayer(this.getSettings().mapTile, {\n            attribution: this.getSettings().mapTileAttribution,\n            maxZoom: 20\n        }).addTo(this.map);\n    }\n    groupCategories() {\n        const groupedCategories = {};\n        this.poiCollections.forEach((poiCollection) => {\n            const categoryUids = poiCollection.categories.map((category) => String(category.uid));\n            categoryUids\n                .filter((categoryUid) => this.getSettings().categories.includes(categoryUid))\n                .forEach((categoryUid) => {\n                if (!groupedCategories.hasOwnProperty(categoryUid)) {\n                    groupedCategories[categoryUid] = poiCollection.categories.find((category) => String(category.uid) === categoryUid);\n                }\n            });\n        });\n        return groupedCategories;\n    }\n    getCategoriesOfCheckboxesWithStatus(form, isChecked) {\n        let categories = [];\n        let checkboxes = isChecked\n            ? Array.from(form.querySelectorAll(\"input:checked\"))\n            : Array.from(form.querySelectorAll(\"input:not(:checked)\"));\n        checkboxes.forEach((checkbox) => {\n            categories.push(parseInt(checkbox.value));\n        });\n        return categories;\n    }\n    getMarkersToChangeVisibilityFor(categoryUid, form, isChecked) {\n        let markers = [];\n        if (this.allMarkers.length === 0) {\n            return markers;\n        }\n        let marker = null;\n        let allCategoriesOfMarker = null;\n        let categoriesOfCheckboxesWithStatus = this.getCategoriesOfCheckboxesWithStatus(form, isChecked);\n        for (let i = 0; i < this.allMarkers.length; i++) {\n            marker = this.allMarkers[i];\n            allCategoriesOfMarker = marker.poiCollection.categories;\n            if (allCategoriesOfMarker.length === 0) {\n                continue;\n            }\n            let markerCategoryHasCheckboxWithStatus;\n            for (let j = 0; j < allCategoriesOfMarker.length; j++) {\n                markerCategoryHasCheckboxWithStatus = false;\n                for (let k = 0; k < categoriesOfCheckboxesWithStatus.length; k++) {\n                    if (allCategoriesOfMarker[j].uid === categoriesOfCheckboxesWithStatus[k]) {\n                        markerCategoryHasCheckboxWithStatus = true;\n                    }\n                }\n                if (markerCategoryHasCheckboxWithStatus === isChecked) {\n                    break;\n                }\n            }\n            if (markerCategoryHasCheckboxWithStatus) {\n                markers.push(marker.marker);\n            }\n        }\n        return markers;\n    }\n    showSwitchableCategories() {\n        var _a;\n        let categories = this.groupCategories();\n        let form = document.createElement(\"form\");\n        form.classList.add(\"txMaps2Form\");\n        form.setAttribute(\"id\", \"txMaps2Form-\" + this.getContentRecord().uid);\n        // Add checkbox for category\n        for (let categoryUid in categories) {\n            if (categories.hasOwnProperty(categoryUid)) {\n                form.appendChild(this.getCheckbox(categories[categoryUid]));\n                (_a = form.querySelector(\"#checkCategory_\" + categoryUid)) === null || _a === void 0 ? void 0 : _a.insertAdjacentHTML(\"afterend\", `<span class=\"map-category\">${categories[categoryUid].title}</span>`);\n            }\n        }\n        // Add listener for checkboxes\n        form.querySelectorAll(\"input\").forEach((checkbox) => {\n            checkbox.addEventListener(\"click\", () => {\n                let isChecked = checkbox.checked;\n                let categoryUid = checkbox.value;\n                let markers = this.getMarkersToChangeVisibilityFor(categoryUid, form, isChecked);\n                markers.forEach((marker) => {\n                    if (isChecked) {\n                        this.map.addLayer(marker);\n                    }\n                    else {\n                        this.map.removeLayer(marker);\n                    }\n                });\n            });\n        });\n        this.element.insertAdjacentElement(\"afterend\", form);\n    }\n    getCheckbox(category) {\n        let div = document.createElement(\"div\");\n        div.classList.add(\"form-group\");\n        div.innerHTML = `\n      <div class=\"checkbox\">\n          <label>\n              <input type=\"checkbox\" class=\"checkCategory\" id=\"checkCategory_${category.uid}\" checked=\"checked\" value=\"${category.uid}\">\n          </label>\n      </div>`;\n        return div;\n    }\n    countObjectProperties(obj) {\n        let count = 0;\n        for (let key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                count++;\n            }\n        }\n        return count;\n    }\n    createPointByCollectionType() {\n        let marker;\n        let categoryUid = 0;\n        for (let i = 0; i < this.poiCollections.length; i++) {\n            if (this.poiCollections[i].strokeColor === \"\") {\n                this.poiCollections[i].strokeColor = this.getExtConf().strokeColor;\n            }\n            if (this.poiCollections[i].strokeOpacity === 0) {\n                this.poiCollections[i].strokeOpacity = this.getExtConf().strokeOpacity;\n            }\n            // ... (similar updates for other properties)\n            marker = null;\n            switch (this.poiCollections[i].collectionType) {\n                case \"Point\":\n                    marker = this.createMarker(this.poiCollections[i]);\n                    break;\n                case \"Area\":\n                    marker = this.createArea(this.poiCollections[i]);\n                    break;\n                case \"Route\":\n                    marker = this.createRoute(this.poiCollections[i]);\n                    break;\n                case \"Radius\":\n                    marker = this.createRadius(this.poiCollections[i]);\n                    break;\n            }\n            this.allMarkers.push({\n                marker: marker,\n                poiCollection: this.poiCollections[i]\n            });\n            categoryUid = 0;\n            for (let c = 0; c < this.poiCollections[i].categories.length; c++) {\n                categoryUid = this.poiCollections[i].categories[c].uid;\n                if (!this.categorizedMarkers.hasOwnProperty(categoryUid)) {\n                    this.categorizedMarkers[categoryUid] = [];\n                }\n                this.categorizedMarkers[categoryUid].push(marker);\n            }\n        }\n    }\n    createMarkerByLatLng(latitude, longitude) {\n        let marker = L.marker([latitude, longitude]).addTo(this.map);\n        this.bounds.extend(marker.getLatLng());\n    }\n    createMarker(poiCollection) {\n        let marker = L.marker([poiCollection.latitude, poiCollection.longitude], {\n            'draggable': this.editable\n        }).addTo(this.map);\n        if (poiCollection.hasOwnProperty(\"markerIcon\") && poiCollection.markerIcon !== \"\") {\n            let icon = L.icon({\n                iconUrl: poiCollection.markerIcon,\n                iconSize: [poiCollection.markerIconWidth, poiCollection.markerIconHeight],\n                iconAnchor: [poiCollection.markerIconAnchorPosX, poiCollection.markerIconAnchorPosY]\n            });\n            marker.setIcon(icon);\n        }\n        this.bounds.extend(marker.getLatLng());\n        if (this.editable) {\n            this.addEditListeners(this.element, marker, poiCollection);\n        }\n        else {\n            this.addInfoWindow(marker, poiCollection);\n        }\n        return marker;\n    }\n    createArea(poiCollection) {\n        let latlngs = [];\n        for (let i = 0; i < poiCollection.pois.length; i++) {\n            let latLng = [poiCollection.pois[i].latitude, poiCollection.pois[i].longitude];\n            this.bounds.extend(latLng);\n            latlngs.push(latLng);\n        }\n        let marker = L.polygon(latlngs, {\n            color: poiCollection.strokeColor,\n            opacity: poiCollection.strokeOpacity,\n            weight: poiCollection.strokeWeight,\n            fillColor: poiCollection.fillColor,\n            fillOpacity: poiCollection.fillOpacity\n        }).addTo(this.map);\n        this.addInfoWindow(marker, poiCollection);\n        return marker;\n    }\n    createRoute(poiCollection) {\n        let latlngs = [];\n        for (let i = 0; i < poiCollection.pois.length; i++) {\n            let latLng = [poiCollection.pois[i].latitude, poiCollection.pois[i].longitude];\n            this.bounds.extend(latLng);\n            latlngs.push(latLng);\n        }\n        let marker = L.polyline(latlngs, {\n            color: poiCollection.strokeColor,\n            opacity: poiCollection.strokeOpacity,\n            weight: poiCollection.strokeWeight,\n            fillColor: poiCollection.fillColor,\n            fillOpacity: poiCollection.fillOpacity\n        }).addTo(this.map);\n        this.addInfoWindow(marker, poiCollection);\n        return marker;\n    }\n    createRadius(poiCollection) {\n        let marker = L.circle([poiCollection.latitude, poiCollection.longitude], {\n            color: poiCollection.strokeColor,\n            opacity: poiCollection.strokeOpacity,\n            weight: poiCollection.strokeWeight,\n            fillColor: poiCollection.fillColor,\n            fillOpacity: poiCollection.fillOpacity,\n            radius: poiCollection.radius\n        }).addTo(this.map);\n        this.bounds.extend(marker.getBounds());\n        this.addInfoWindow(marker, poiCollection);\n        return marker;\n    }\n    addInfoWindow(element, poiCollection) {\n        element.addEventListener(\"click\", () => {\n            fetch(this.environment.ajaxUrl, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    poiCollection: poiCollection.uid\n                })\n            })\n                .then(response => response.json())\n                .then(data => {\n                element.bindPopup(data.content).openPopup();\n            })\n                .catch(error => console.error('Error:', error));\n        });\n    }\n    addEditListeners(mapContainer, marker, poiCollection) {\n        marker.on('dragend', () => {\n            var _a, _b;\n            let lat = marker.getLatLng().lat.toFixed(6);\n            let lng = marker.getLatLng().lng.toFixed(6);\n            (_a = mapContainer\n                .previousElementSibling) === null || _a === void 0 ? void 0 : _a.querySelector(`input.latitude-${this.getContentRecord().uid}`).setAttribute(\"value\", lat);\n            (_b = mapContainer\n                .previousElementSibling) === null || _b === void 0 ? void 0 : _b.querySelector(`input.longitude-${this.getContentRecord().uid}`).setAttribute(\"value\", lng);\n        });\n        this.map.on('click', (event) => {\n            var _a, _b;\n            marker.setLatLng(event.latlng);\n            (_a = mapContainer\n                .previousElementSibling) === null || _a === void 0 ? void 0 : _a.querySelector(`input.latitude-${this.getContentRecord().uid}`).setAttribute(\"value\", event.latlng.lat.toFixed(6));\n            (_b = mapContainer\n                .previousElementSibling) === null || _b === void 0 ? void 0 : _b.querySelector(`input.longitude-${this.getContentRecord().uid}`).setAttribute(\"value\", event.latlng.lng.toFixed(6));\n        });\n    }\n    canBeInterpretedAsNumber(value) {\n        return typeof value === 'number' || !isNaN(Number(value));\n    }\n    getContentRecord() {\n        return this.environment.contentRecord;\n    }\n    getExtConf() {\n        return this.environment.extConf;\n    }\n    getSettings() {\n        return this.environment.settings;\n    }\n}\nlet maps2OpenStreetMaps = [];\ndocument.querySelectorAll(\".maps2\").forEach((element) => {\n    const environment = typeof element.dataset.environment !== 'undefined' ? element.dataset.environment : '{}';\n    const override = typeof element.dataset.override !== 'undefined' ? element.dataset.override : '{}';\n    maps2OpenStreetMaps.push(new OpenStreetMap2(element, Object.assign(Object.assign({}, JSON.parse(environment)), JSON.parse(override))));\n});\n"]}