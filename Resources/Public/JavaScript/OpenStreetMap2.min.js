class OpenStreetMap2{constructor(t,e){this.element=t,this.environment=e,this.allMarkers=[],this.categorizedMarkers={},this.editable=this.element.classList.contains("editMarker"),this.bounds=new L.LatLngBounds([[e.extConf.defaultLatitude,e.extConf.defaultLongitude]]),this.preparePoiCollection(),this.setMapDimensions(),this.createMap(),this.setMarkersOnMap()}preparePoiCollection(){this.poiCollections=JSON.parse(this.element.getAttribute("data-pois")||"[]")}setMarkersOnMap(){this.isPOICollectionsEmpty()?this.createMarkerBasedOnDataAttributes():this.createMarkerBasedOnPOICollections()}isPOICollectionsEmpty(){return 0===this.poiCollections.length}createMarkerBasedOnDataAttributes(){var t=this.getAttributeAsFloat("data-latitude"),e=this.getAttributeAsFloat("data-longitude");isNaN(t)||isNaN(e)||this.createMarkerByLatLng(t,e)}getAttributeAsFloat(t){return parseFloat(this.element.getAttribute(t)||"")}createMarkerBasedOnPOICollections(){this.createPointByCollectionType(),1<this.countObjectProperties(this.categorizedMarkers)&&this.showSwitchableCategories(),this.adjustMapZoom()}adjustMapZoom(){this.shouldFitBounds()?this.map.fitBounds(this.bounds):this.map.panTo([this.poiCollections[0].latitude,this.poiCollections[0].longitude])}shouldFitBounds(){return!1===this.getSettings().forceZoom&&(1<this.poiCollections.length||1===this.poiCollections.length&&("Area"===this.poiCollections[0].collectionType||"Route"===this.poiCollections[0].collectionType))}setMapDimensions(){this.element.style.height=this.normalizeDimension(this.getSettings().mapHeight),this.element.style.width=this.normalizeDimension(this.getSettings().mapWidth)}normalizeDimension(t){let e=String(t);return this.canBeInterpretedAsNumber(e)&&(e+="px"),e}createMap(){this.map=L.map(this.element,{center:[this.getExtConf().defaultLatitude,this.getExtConf().defaultLongitude],zoom:this.getSettings().zoom?this.getSettings().zoom:12,editable:this.editable,scrollWheelZoom:"0"!==this.getSettings().activateScrollWheel}),L.tileLayer(this.getSettings().mapTile,{attribution:this.getSettings().mapTileAttribution,maxZoom:20}).addTo(this.map)}groupCategories(){const i={};return this.poiCollections.forEach(t=>{t.categories.map(t=>String(t.uid)).filter(t=>this.getSettings().categories.includes(t)).forEach(e=>{i.hasOwnProperty(e)||(i[e]=t.categories.find(t=>String(t.uid)===e))})}),i}getCategoriesOfCheckboxesWithStatus(t,e){let i=[];return(e?Array.from(t.querySelectorAll("input:checked")):Array.from(t.querySelectorAll("input:not(:checked)"))).forEach(t=>{i.push(parseInt(t.value))}),i}getMarkersToChangeVisibilityFor(t,e,o){var r=[];if(0!==this.allMarkers.length){var s,a,n=this.getCategoriesOfCheckboxesWithStatus(e,o);for(let t=0;t<this.allMarkers.length;t++)if(0!==(a=(s=this.allMarkers[t]).poiCollection.categories).length){let i;for(let e=0;e<a.length;e++){i=!1;for(let t=0;t<n.length;t++)a[e].uid===n[t]&&(i=!0);if(i===o)break}i&&r.push(s.marker)}}return r}showSwitchableCategories(){var t,e,i=this.groupCategories();let o=document.createElement("form");for(e in o.classList.add("txMaps2Form"),o.setAttribute("id","txMaps2Form-"+this.getContentRecord().uid),i)i.hasOwnProperty(e)&&(o.appendChild(this.getCheckbox(i[e])),null!=(t=o.querySelector("#checkCategory_"+e)))&&t.insertAdjacentHTML("afterend",`<span class="map-category">${i[e].title}</span>`);o.querySelectorAll("input").forEach(i=>{i.addEventListener("click",()=>{let e=i.checked;var t=i.value;this.getMarkersToChangeVisibilityFor(t,o,e).forEach(t=>{e?this.map.addLayer(t):this.map.removeLayer(t)})})}),this.element.insertAdjacentElement("afterend",o)}getCheckbox(t){var e=document.createElement("div");return e.classList.add("form-group"),e.innerHTML=`
      <div class="checkbox">
          <label>
              <input type="checkbox" class="checkCategory" id="checkCategory_${t.uid}" checked="checked" value="${t.uid}">
          </label>
      </div>`,e}countObjectProperties(t){let e=0;for(var i in t)t.hasOwnProperty(i)&&e++;return e}createPointByCollectionType(){let i;var o;for(let e=0;e<this.poiCollections.length;e++){switch(""===this.poiCollections[e].strokeColor&&(this.poiCollections[e].strokeColor=this.getExtConf().strokeColor),0===this.poiCollections[e].strokeOpacity&&(this.poiCollections[e].strokeOpacity=this.getExtConf().strokeOpacity),i=null,this.poiCollections[e].collectionType){case"Point":i=this.createMarker(this.poiCollections[e]);break;case"Area":i=this.createArea(this.poiCollections[e]);break;case"Route":i=this.createRoute(this.poiCollections[e]);break;case"Radius":i=this.createRadius(this.poiCollections[e])}this.allMarkers.push({marker:i,poiCollection:this.poiCollections[e]});for(let t=0;t<this.poiCollections[e].categories.length;t++)o=this.poiCollections[e].categories[t].uid,this.categorizedMarkers.hasOwnProperty(o)||(this.categorizedMarkers[o]=[]),this.categorizedMarkers[o].push(i)}}createMarkerByLatLng(t,e){t=L.marker([t,e]).addTo(this.map);this.bounds.extend(t.getLatLng())}createMarker(t){var e,i=L.marker([t.latitude,t.longitude],{draggable:this.editable}).addTo(this.map);return t.hasOwnProperty("markerIcon")&&""!==t.markerIcon&&(e=L.icon({iconUrl:t.markerIcon,iconSize:[t.markerIconWidth,t.markerIconHeight],iconAnchor:[t.markerIconAnchorPosX,t.markerIconAnchorPosY]}),i.setIcon(e)),this.bounds.extend(i.getLatLng()),this.editable?this.addEditListeners(this.element,i,t):this.addInfoWindow(i,t),i}createArea(e){var i=[];for(let t=0;t<e.pois.length;t++){var o=[e.pois[t].latitude,e.pois[t].longitude];this.bounds.extend(o),i.push(o)}var t=L.polygon(i,{color:e.strokeColor,opacity:e.strokeOpacity,weight:e.strokeWeight,fillColor:e.fillColor,fillOpacity:e.fillOpacity}).addTo(this.map);return this.addInfoWindow(t,e),t}createRoute(e){var i=[];for(let t=0;t<e.pois.length;t++){var o=[e.pois[t].latitude,e.pois[t].longitude];this.bounds.extend(o),i.push(o)}var t=L.polyline(i,{color:e.strokeColor,opacity:e.strokeOpacity,weight:e.strokeWeight,fillColor:e.fillColor,fillOpacity:e.fillOpacity}).addTo(this.map);return this.addInfoWindow(t,e),t}createRadius(t){var e=L.circle([t.latitude,t.longitude],{color:t.strokeColor,opacity:t.strokeOpacity,weight:t.strokeWeight,fillColor:t.fillColor,fillOpacity:t.fillOpacity,radius:t.radius}).addTo(this.map);return this.bounds.extend(e.getBounds()),this.addInfoWindow(e,t),e}addInfoWindow(e,t){e.addEventListener("click",()=>{fetch(this.environment.ajaxUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({poiCollection:t.uid})}).then(t=>t.json()).then(t=>{e.bindPopup(t.content).openPopup()}).catch(t=>console.error("Error:",t))})}addEditListeners(o,r,t){r.on("dragend",()=>{var t,e=r.getLatLng().lat.toFixed(6),i=r.getLatLng().lng.toFixed(6);null!=(t=o.previousElementSibling)&&t.querySelector("input.latitude-"+this.getContentRecord().uid).setAttribute("value",e),null!=(t=o.previousElementSibling)&&t.querySelector("input.longitude-"+this.getContentRecord().uid).setAttribute("value",i)}),this.map.on("click",t=>{var e;r.setLatLng(t.latlng),null!=(e=o.previousElementSibling)&&e.querySelector("input.latitude-"+this.getContentRecord().uid).setAttribute("value",t.latlng.lat.toFixed(6)),null!=(e=o.previousElementSibling)&&e.querySelector("input.longitude-"+this.getContentRecord().uid).setAttribute("value",t.latlng.lng.toFixed(6))})}canBeInterpretedAsNumber(t){return"number"==typeof t||!isNaN(Number(t))}getContentRecord(){return this.environment.contentRecord}getExtConf(){return this.environment.extConf}getSettings(){return this.environment.settings}}let maps2OpenStreetMaps=[];document.querySelectorAll(".maps2").forEach(t=>{var e=void 0!==t.dataset.environment?t.dataset.environment:"{}",i=void 0!==t.dataset.override?t.dataset.override:"{}";maps2OpenStreetMaps.push(new OpenStreetMap2(t,Object.assign(Object.assign({},JSON.parse(e)),JSON.parse(i))))});
//# sourceMappingURL=OpenStreetMap2.min.js.map
