{"version":3,"sources":["GoogleMapsModule.js"],"names":["ExtConf","PoiCollection","FormEngine","Notification","GoogleMapsModule","selector","record","extConf","marker","map","infoWindow","infoWindowContent","constructor","let","googleMaps","document","querySelector","this","poiCollection","JSON","parse","dataset","load","then","initialize","window","_GoogleMapsModule","initMaps","bind","Promise","resolve","script","createElement","src","googleMapsLibrary","async","body","append","element","google","maps","InfoWindow","getElementById","createMap","googleMapsJavaScriptApiKey","warning","googleMapsGeocodeApiKey","collectionType","createMarker","createArea","createRoute","createRadius","findAddress","latitude","longitude","setCenter","LatLng","defaultLatitude","defaultLongitude","addEventListener","event","trigger","createMapOptions","zoom","mapTypeId","MapTypeId","ROADMAP","createCircleOptions","circleOptions","center","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","editable","radius","defaultRadius","createPolygonOptions","paths","createPolylineOptions","path","Map","Marker","position","draggable","setContent","addListener","open","setLatLngFields","getPosition","lat","toFixed","lng","setPosition","latLng","coordinatesArray","configuration_map","i","length","push","area","Polygon","getPath","setMap","storeRouteAsJson","removeAt","vertex","getCenter","route","Polyline","Circle","getRadius","rad","address","setFieldValue","parseInt","getUriForRoute","routeObject","forEach","index","toUrlValue","getFieldElement","field","TYPO3","buildFieldName","uid","value","$fieldElement","val","triggerHandler","stringify","pacInput","autocomplete","places","Autocomplete","fields","geoCoder","Geocoder","bindTo","controls","ControlPosition","TOP_LEFT","pacContainer","keyCode","close","place","getPlace","place_id","geocode","placeId","results","status","alert","geometry","location","setVisible","formatted_address","children","textContent","name"],"mappings":"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","file":"GoogleMapsModule.min.js","sourcesContent":["import { ExtConf, PoiCollection } from '@jweiland/maps2/Classes.js';\nimport FormEngine from \"@typo3/backend/form-engine.js\";\nimport Notification from\"@typo3/backend/notification.js\"\n\nclass GoogleMapsModule {\n  selector = '#maps2ConfigurationMap';\n  record = [];\n  extConf = [];\n  marker = {};\n  map = {};\n  infoWindow = {};\n  infoWindowContent = {};\n\n  constructor() {\n    let googleMaps = document.querySelector(this.selector);\n    let poiCollection = JSON.parse(googleMaps.dataset.poiCollection);\n    let extConf = JSON.parse(googleMaps.dataset.extConf);\n\n    this.load(extConf).then(() => {\n      this.initialize(googleMaps, poiCollection, extConf);\n    });\n  }\n\n  load = (extConf) => {\n    window._GoogleMapsModule = this;\n    window._GoogleMapsModule.initMaps = this.initMaps.bind(this);\n\n    let promise = new Promise(resolve => {\n      this.resolve = resolve;\n\n      const script = document.createElement(\"script\");\n      script.src = extConf.googleMapsLibrary + \"&callback=_GoogleMapsModule.initMaps\";\n      script.async = true;\n      document.body.append(script);\n    });\n\n    return promise;\n  }\n\n  initMaps = () => {\n    if (this.resolve) {\n      this.resolve();\n    }\n  };\n\n  /**\n   * @param {HTMLElement} element\n   * @param {PoiCollection} poiCollection\n   * @param {ExtConf} extConf\n   */\n  initialize = (element, poiCollection, extConf) => {\n    this.record = poiCollection;\n    this.extConf = extConf;\n    this.infoWindow = new google.maps.InfoWindow();\n    this.infoWindowContent = document.getElementById(\"infowindow-content\");\n    this.map = this.createMap(element);\n\n    if (extConf.googleMapsJavaScriptApiKey === \"\") {\n      Notification.warning(\n        'Missing JS API Key',\n        'You have forgotten to set Google Maps JavaScript ApiKey in Extension Settings.',\n        15\n      );\n    }\n\n    if (extConf.googleMapsGeocodeApiKey === \"\") {\n      Notification.warning(\n        'Missing GeoCode API Key',\n        'You have forgotten to set Google Maps Geocode ApiKey in Extension Settings.',\n        15\n      );\n    }\n\n    switch (poiCollection.collectionType) {\n      case \"Point\":\n        this.createMarker(poiCollection);\n        break;\n      case \"Area\":\n        this.createArea(poiCollection);\n        break;\n      case \"Route\":\n        this.createRoute(poiCollection);\n        break;\n      case \"Radius\":\n        this.createRadius(poiCollection);\n        break;\n    }\n\n    this.findAddress();\n\n    if (poiCollection.latitude && poiCollection.longitude) {\n      this.map.setCenter(new google.maps.LatLng(poiCollection.latitude, poiCollection.longitude));\n    } else {\n      // Fallback\n      this.map.setCenter(new google.maps.LatLng(extConf.defaultLatitude, extConf.defaultLongitude));\n    }\n\n    // if maps2 was inserted in (bootstrap) tabs, we have to re-render the map\n    document.querySelector(\"ul.t3js-tabs li:nth-of-type(2) a[data-bs-toggle='tab']\").addEventListener(\"shown.bs.tab\", () => {\n      google.maps.event.trigger(this.map, \"resize\");\n      if (poiCollection.latitude && poiCollection.longitude) {\n        this.map.setCenter(new google.maps.LatLng(poiCollection.latitude, poiCollection.longitude));\n      } else {\n        this.map.setCenter(new google.maps.LatLng(extConf.defaultLatitude, extConf.defaultLongitude));\n      }\n    });\n  };\n\n  createMapOptions = function() {\n    return {\n      zoom: 14,\n      mapTypeId: google.maps.MapTypeId.ROADMAP\n    };\n  };\n\n  createCircleOptions = function(map, record, extConf) {\n    let circleOptions = {\n      map: map,\n      center: new google.maps.LatLng(record.latitude, record.longitude),\n      strokeColor: extConf.strokeColor,\n      strokeOpacity: extConf.strokeOpacity,\n      strokeWeight: extConf.strokeWeight,\n      fillColor: extConf.fillColor,\n      fillOpacity: extConf.fillOpacity,\n      editable: true\n    };\n    if (record.radius === 0) {\n      circleOptions.radius = extConf.defaultRadius;\n    } else {\n      circleOptions.radius = record.radius;\n    }\n    return circleOptions;\n  };\n\n  createPolygonOptions = function(paths, extConf) {\n    return {\n      paths: paths,\n      strokeColor: extConf.strokeColor,\n      strokeOpacity: extConf.strokeOpacity,\n      strokeWeight: extConf.strokeWeight,\n      fillColor: extConf.fillColor,\n      fillOpacity: extConf.fillOpacity,\n      editable: true\n    };\n  };\n\n  createPolylineOptions = function(paths, extConf) {\n    return {\n      path: paths,\n      strokeColor: extConf.strokeColor,\n      strokeOpacity: extConf.strokeOpacity,\n      strokeWeight: extConf.strokeWeight,\n      editable: true\n    };\n  };\n\n  createMap = function(element) {\n    return new google.maps.Map(\n      element,\n      this.createMapOptions()\n    );\n  };\n\n  createMarker = function(record) {\n    this.marker = new google.maps.Marker({\n      position: new google.maps.LatLng(record.latitude, record.longitude),\n      map: this.map,\n      draggable: true\n    });\n\n    this.infoWindow.setContent(this.infoWindowContent);\n\n    // open InfoWindow, if marker was clicked.\n    this.marker.addListener(\"click\", function() {\n      this.infoWindow.open(this.map, this.marker);\n    });\n\n    // update fields and marker while dragging\n    google.maps.event.addListener(this.marker, 'dragend', function() {\n      this.setLatLngFields(\n        this.marker.getPosition().lat().toFixed(6),\n        this.marker.getPosition().lng().toFixed(6),\n        0\n      );\n    });\n\n    // update fields and marker when clicking on the map\n    google.maps.event.addListener(this.map, 'click', function(event) {\n      this.marker.setPosition(event.latLng);\n      this.setLatLngFields(\n        event.latLng.lat().toFixed(6),\n        event.latLng.lng().toFixed(6),\n        0\n      );\n    });\n  };\n\n  createArea = function(record) {\n    let coordinatesArray = [];\n\n    if (record.configuration_map) {\n      for (let i = 0; i < record.configuration_map.length; i++) {\n        coordinatesArray.push(\n          new google.maps.LatLng(\n            record.configuration_map[i].latitude,\n            record.configuration_map[i].longitude\n          )\n        );\n      }\n    }\n\n    if (coordinatesArray.length === 0) {\n      coordinatesArray.push(\n        new google.maps.LatLng(\n          record.latitude,\n          record.longitude\n        )\n      );\n    }\n\n    let area = new google.maps.Polygon(\n      this.createPolygonOptions(coordinatesArray, this.extConf)\n    );\n    let path = area.getPath();\n\n    area.setMap(this.map);\n\n    // Listener which will be called, if a vertex was moved to a new location\n    google.maps.event.addListener(path, 'set_at', function() {\n      this.storeRouteAsJson(area);\n    });\n    // Listener to add new vertex in between a route\n    google.maps.event.addListener(path, 'insert_at', function() {\n      this.storeRouteAsJson(area);\n    });\n    // Listener to remove a vertex\n    google.maps.event.addListener(area, 'rightclick', function(event) {\n      area.getPath().removeAt(event.vertex);\n      this.storeRouteAsJson(area);\n    });\n    // Listener to add a new vertex. Will not be called, while inserting a vertex in between\n    google.maps.event.addListener(this.map, 'click', function(event) {\n      area.getPath().push(event.latLng);\n    });\n    // update fields for saving map position\n    google.maps.event.addListener(this.map, 'dragend', function() {\n      this.setLatLngFields(\n        this.map.getCenter().lat().toFixed(6),\n        this.map.getCenter().lng().toFixed(6),\n        0\n      );\n    });\n  };\n\n  createRoute = function(record) {\n    let coordinatesArray = [];\n\n    if (record.configuration_map) {\n      for (let i = 0; i < record.configuration_map.length; i++) {\n        coordinatesArray.push(\n          new google.maps.LatLng(\n            record.configuration_map[i].latitude,\n            record.configuration_map[i].longitude\n          )\n        );\n      }\n    }\n\n    if (coordinatesArray.length === 0) {\n      coordinatesArray.push(\n        new google.maps.LatLng(\n          record.latitude,\n          record.longitude\n        )\n      );\n    }\n\n    /* create route overlay */\n    let route = new google.maps.Polyline(\n      this.createPolylineOptions(coordinatesArray, this.extConf)\n    );\n    let path = route.getPath();\n\n    route.setMap(this.map);\n\n    // Listener which will be called, if a vertex was moved to a new location\n    google.maps.event.addListener(path, 'set_at', function() {\n      this.storeRouteAsJson(route);\n    });\n    // Listener to add new vertex in between a route\n    google.maps.event.addListener(path, 'insert_at', function() {\n      this.storeRouteAsJson(route);\n    });\n    // Listener to remove a vertex\n    google.maps.event.addListener(route, 'rightclick', function(event) {\n      route.getPath().removeAt(event.vertex);\n      this.storeRouteAsJson(route);\n    });\n    // Listener to add a new vertex. Will not be called, while inserting a vertex in between\n    google.maps.event.addListener(this.map, 'click', function(event) {\n      route.getPath().push(event.latLng);\n    });\n    // update fields for saving map position\n    google.maps.event.addListener(this.map, 'dragend', function() {\n      this.setLatLngFields(\n        this.map.getCenter().lat().toFixed(6),\n        this.map.getCenter().lng().toFixed(6),\n        0\n      );\n    });\n  };\n\n  createRadius = function(record) {\n    this.marker = new google.maps.Circle(\n      this.createCircleOptions(this.map, record, this.extConf)\n    );\n\n    // update fields and marker while dragging\n    google.maps.event.addListener(this.marker, 'center_changed', function() {\n      this.setLatLngFields(\n        this.marker.getCenter().lat().toFixed(6),\n        this.marker.getCenter().lng().toFixed(6),\n        this.marker.getRadius()\n      );\n    });\n\n    // update fields and marker while resizing the radius\n    google.maps.event.addListener(this.marker, 'radius_changed', function() {\n      this.setLatLngFields(\n        this.marker.getCenter().lat().toFixed(6),\n        this.marker.getCenter().lng().toFixed(6),\n        this.marker.getRadius()\n      );\n    });\n\n    // update fields and marker when clicking on the map\n    google.maps.event.addListener(this.map, 'click', function(event) {\n      this.marker.setCenter(event.latLng);\n      this.setLatLngFields(\n        event.latLng.lat().toFixed(6),\n        event.latLng.lng().toFixed(6),\n        this.marker.getRadius()\n      );\n    });\n\n    this.setLatLngFields(record.latitude, record.longitude, record.radius);\n  };\n\n  /**\n   * Fill TCA fields for Lat and Lng with value of marker position\n   *\n   * @param {number} lat\n   * @param {number} lng\n   * @param {number} rad\n   * @param {string} address\n   */\n  setLatLngFields = (lat, lng, rad, address) => {\n    this.setFieldValue(\"latitude\", lat);\n    this.setFieldValue(\"longitude\", lng);\n\n    if (typeof rad !== \"undefined\" && rad > 0) {\n      this.setFieldValue(\"radius\", parseInt(rad));\n    }\n\n    if (typeof address !== \"undefined\") {\n      this.setFieldValue(\"address\", address);\n    }\n  };\n\n  /**\n   * Generate an uri to save all coordinates\n   *\n   * @param {object} route\n   */\n  getUriForRoute = route => {\n    let routeObject = {};\n\n    route.getPath().forEach((latLng, index) => {\n      routeObject[index] = latLng.toUrlValue();\n    });\n\n    return routeObject;\n  };\n\n  /**\n   * Return FieldElement from TCEFORM by fieldName\n   *\n   * @param {string} field\n   * @returns {*|HTMLElement} jQuery object. FormEngine works with $ selectors\n   */\n  getFieldElement = field => {\n    // Return the FieldElement which is visible to the editor\n    return TYPO3.FormEngine.getFieldElement(this.buildFieldName(field), '_list');\n  };\n\n  /**\n   * Build fieldName like 'data[tx_maps2_domain_model_poicollection][1][latitude]'\n   *\n   * @param {string} field\n   * @returns {string}\n   */\n  buildFieldName = field => {\n    return 'data[tx_maps2_domain_model_poicollection][' + this.record.uid + '][' + field + ']';\n  };\n\n  /**\n   * Set field value\n   *\n   * @param {string} field\n   * @param {string | int} value\n   */\n  setFieldValue = (field, value) => {\n    /* getFieldName returns a jquery object via FormEngine */\n    let $fieldElement = this.getFieldElement(field);\n\n    if ($fieldElement && $fieldElement.length) {\n      $fieldElement.val(value);\n      $fieldElement.triggerHandler(\"change\");\n    }\n  };\n\n  /**\n   * Store route/area path into configuration_map as JSON\n   *\n   * @param route\n   */\n  storeRouteAsJson = route => {\n    this.setFieldValue(\n      \"configuration_map\",\n      JSON.stringify(this.getUriForRoute(route))\n    );\n  };\n\n  /**\n   * Read address, send it to Google and move map/marker to new location\n   */\n  findAddress = () => {\n    let pacInput = document.querySelector(\"#pac-input\");\n    let autocomplete = new google.maps.places.Autocomplete(pacInput, {fields: [\"place_id\"]});\n    let geoCoder = new google.maps.Geocoder;\n\n    autocomplete.bindTo(\"bounds\", this.map);\n    this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(pacInput);\n\n    // Prevent submitting the BE form on enter, while selecting entry from AutoSuggest\n    pacInput.addEventListener(\"keydown\", event => {\n      let pacContainer = document.querySelector(\".pac-container\");\n      if (event.keyCode === 13 && pacContainer !== null) return false;\n    });\n\n    autocomplete.addListener(\"place_changed\", () => {\n      this.infoWindow.close();\n      let place = autocomplete.getPlace();\n\n      if (!place.place_id) {\n        return;\n      }\n\n      geoCoder.geocode({\"placeId\": place.place_id}, (results, status) => {\n        if (status !== \"OK\") {\n          window.alert(\"Geocoder failed due to: \" + status);\n          return;\n        }\n\n        let lat = results[0].geometry.location.lat().toFixed(6);\n        let lng = results[0].geometry.location.lng().toFixed(6);\n\n        switch (this.record.collectionType) {\n          case 'Point':\n            this.marker.setPosition(results[0].geometry.location);\n            this.marker.setVisible(true);\n            this.setLatLngFields(lat, lng, 0, results[0].formatted_address);\n            break;\n          case 'Area':\n            this.setLatLngFields(lat, lng, 0, results[0].formatted_address);\n            break;\n          case 'Route':\n            this.setLatLngFields(lat, lng, 0, results[0].formatted_address);\n            break;\n          case 'Radius':\n            this.marker.setCenter(results[0].geometry.location);\n            this.setLatLngFields(lat, lng, this.marker.getRadius(), results[0].formatted_address);\n            break;\n        }\n\n        this.map.setCenter(results[0].geometry.location);\n        this.infoWindowContent.children[\"place-name\"].textContent = place.name;\n        this.infoWindowContent.children[\"place-id\"].textContent = place.place_id;\n        this.infoWindowContent.children[\"place-address\"].textContent = results[0].formatted_address;\n        this.infoWindow.open(this.map, this.marker);\n      });\n    });\n  };\n}\n\nexport default new GoogleMapsModule();\n"]}